name: Editorial Approval Workflow

on:
  schedule:
    # Run every Saturday at 9:00 AM UTC for weekly newsletter generation
    - cron: '0 9 * * 6'
  workflow_dispatch:
    inputs:
      force_generate:
        description: "Force generation even if recent newsletter exists"
        required: false
        default: false
        type: boolean

env:
  NEWSLETTER_ISSUE_LABEL: "editorial-review"
  APPROVAL_TIMEOUT_HOURS: 48

jobs:
  # Step 1: Generate newsletter draft
  generate-draft:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      newsletter_number: ${{ steps.generate.outputs.newsletter_number }}
      newsletter_title: ${{ steps.generate.outputs.newsletter_title }}
      generation_status: ${{ steps.generate.outputs.generation_status }}
      preview_url: ${{ steps.generate.outputs.preview_url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Generate Newsletter Draft
        id: generate
        run: |
          echo "üìß Generating newsletter draft..."
          
          # Generate newsletter in dry-run mode (no publishing)
          python -m src.newsletter_bot generate --dry-run > newsletter_output.log 2>&1 || {
            echo "‚ùå Newsletter generation failed"
            echo "generation_status=failed" >> $GITHUB_OUTPUT
            cat newsletter_output.log
            exit 1
          }
          
          echo "‚úÖ Newsletter draft generated successfully"
          echo "generation_status=success" >> $GITHUB_OUTPUT
          
          # Extract newsletter metadata from output
          NEWSLETTER_NUMBER=$(grep -o "Curated Briefing [0-9]\+" newsletter_output.log | tail -1 | grep -o "[0-9]\+")
          NEWSLETTER_TITLE=$(grep -o "Curated Briefing [0-9]\+" newsletter_output.log | tail -1)
          
          echo "newsletter_number=${NEWSLETTER_NUMBER:-$(date +%Y%m%d)}" >> $GITHUB_OUTPUT
          echo "newsletter_title=${NEWSLETTER_TITLE:-Draft Newsletter}" >> $GITHUB_OUTPUT
          
          # Create preview file for the approval interface
          if [ -f "newsletter_draft.md" ]; then
            echo "preview_url=draft_preview" >> $GITHUB_OUTPUT
          fi
        env:
          READWISE_API_KEY: ${{ secrets.READWISE_API_KEY }}
          GLASP_API_KEY: ${{ secrets.GLASP_API_KEY }}
          RSS_FEEDS: ${{ secrets.RSS_FEEDS }}
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}

      - name: Upload Newsletter Draft Artifact
        uses: actions/upload-artifact@v4
        if: steps.generate.outputs.generation_status == 'success'
        with:
          name: newsletter-draft-${{ steps.generate.outputs.newsletter_number }}
          path: |
            newsletter_output.log
            newsletter_draft.md
            *.json
          retention-days: 7

  # Step 2: Create approval request issue
  create-approval-request:
    needs: generate-draft
    runs-on: ubuntu-latest
    if: needs.generate-draft.outputs.generation_status == 'success'
    outputs:
      issue_number: ${{ steps.create-issue.outputs.issue_number }}
      
    steps:
      - name: Download Newsletter Draft
        uses: actions/download-artifact@v4
        with:
          name: newsletter-draft-${{ needs.generate-draft.outputs.newsletter_number }}

      - name: Create Editorial Approval Issue
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            // Read the generated newsletter content
            const fs = require('fs');
            let previewContent = "Newsletter preview not available";
            let qaResults = "QA results not available";
            
            try {
              if (fs.existsSync('newsletter_draft.md')) {
                const fullContent = fs.readFileSync('newsletter_draft.md', 'utf8');
                // Get first 2000 chars for preview
                previewContent = fullContent.length > 2000 
                  ? fullContent.substring(0, 2000) + "\n\n... [Content Truncated - Full version in artifact] ..."
                  : fullContent;
              }
              
              if (fs.existsSync('newsletter_output.log')) {
                const logContent = fs.readFileSync('newsletter_output.log', 'utf8');
                // Extract QA results from log
                const qaMatch = logContent.match(/QA Results:[\s\S]*?(?=\n\n|\n[A-Z]|\Z)/);
                qaResults = qaMatch ? qaMatch[0] : "QA checks passed";
              }
            } catch (error) {
              console.log('Error reading files:', error);
            }
            
            const issueBody = `# üìß Newsletter Editorial Approval Required
            
            **Newsletter:** ${{ needs.generate-draft.outputs.newsletter_title }}
            **Generated:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ## üìã Quick Decision
            
            **To APPROVE and publish this newsletter, comment:** \`/approve\`
            **To REJECT this newsletter, comment:** \`/reject\`
            **To request changes, comment:** \`/changes\` followed by your feedback
            
            ---
            
            ## üìñ Newsletter Preview
            
            \`\`\`markdown
            ${previewContent}
            \`\`\`
            
            ## üîç Quality Assurance Results
            
            \`\`\`
            ${qaResults}
            \`\`\`
            
            ## üìä Editorial Statistics
            
            - **Content Sources:** RSS Feeds, Readwise, Glasp
            - **AI Processing:** OpenRouter LLM with editorial workflow
            - **Quality Checks:** Automated QA pipeline passed
            - **Template:** The Filter format
            
            ## ‚è±Ô∏è Approval Deadline
            
            This approval request will **auto-reject in ${{ env.APPROVAL_TIMEOUT_HOURS }} hours** if no decision is made.
            **Deadline:** ${new Date(Date.now() + ${{ env.APPROVAL_TIMEOUT_HOURS }} * 60 * 60 * 1000).toISOString()}
            
            ## üìé Resources
            
            - [Download Full Newsletter Draft](../../actions/runs/${{ github.run_id }})
            - [View Generation Logs](../../actions/runs/${{ github.run_id }})
            - [Newsletter Archive](https://buttondown.com/filter/archive)
            
            ---
            *This is an automated editorial approval request. The newsletter will only be published after explicit approval.*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìß Editorial Approval: ${{ needs.generate-draft.outputs.newsletter_title }}`,
              body: issueBody,
              labels: ['${{ env.NEWSLETTER_ISSUE_LABEL }}', 'newsletter', 'pending-approval'],
              assignees: ['${{ github.repository_owner }}'] // Assign to repo owner
            });
            
            console.log(`Created approval issue #${issue.data.number}`);
            return issue.data.number;

  # Step 3: Send email notification  
  send-notification:
    needs: [generate-draft, create-approval-request]
    if: needs.generate-draft.outputs.generation_status == 'success'
    uses: ./.github/workflows/email-notifications.yml
    with:
      notification_type: "approval_request"
      issue_number: ${{ needs.create-approval-request.outputs.issue_number }}
      newsletter_title: ${{ needs.generate-draft.outputs.newsletter_title }}

  # Step 3: Wait for approval (this job will be triggered by issue comments)
  # This is handled by the approval-processor workflow below

  # Step 4: Timeout handler
  handle-timeout:
    needs: [generate-draft, create-approval-request]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Setup timeout check
        run: |
          echo "Setting up timeout check for ${{ env.APPROVAL_TIMEOUT_HOURS }} hours"
          # This would typically integrate with a scheduler service
          # For GitHub Actions, we'll rely on the approval-processor workflow

