name: Publish Newsletter

on:
  workflow_dispatch:
    inputs:
      artifact_run_number:
        description: "Run number of the dry-run that created the newsletter artifact (leave empty for latest)"
        required: false
        type: string
      debug:
        description: "Enable debug logging"
        required: false
        default: "false"
        type: boolean

jobs:
  publish-newsletter:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      issues: write
      packages: read
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Find latest newsletter artifact
        id: find_artifact
        run: |
          if [ -n "${{ inputs.artifact_run_number }}" ]; then
            echo "Using specified run number: ${{ inputs.artifact_run_number }}"
            echo "run_number=${{ inputs.artifact_run_number }}" >> $GITHUB_OUTPUT
          else
            echo "Finding latest dry-run with newsletter artifact..."
            # Get the latest successful Newsletter Generation run
            LATEST_RUN=$(gh run list -w "Newsletter Generation" -s success -L 10 --json number,conclusion,displayTitle | \
              jq -r '.[] | select(.displayTitle | contains("dry_run=true")) | .number' | head -1)
            
            if [ -z "$LATEST_RUN" ]; then
              echo "No recent successful dry-run found. Please specify artifact_run_number."
              exit 1
            fi
            
            echo "Found latest dry-run: $LATEST_RUN"
            echo "run_number=$LATEST_RUN" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download newsletter artifact
        id: download
        run: |
          RUN_NUMBER="${{ steps.find_artifact.outputs.run_number }}"
          echo "Downloading artifact from run #$RUN_NUMBER"
          
          # Download the artifact
          if gh run download $RUN_NUMBER -n "newsletter-output-$RUN_NUMBER"; then
            echo "‚úÖ Successfully downloaded newsletter artifact"
            
            if [ -f "newsletter_output.log" ]; then
              echo "artifact_file=newsletter_output.log" >> $GITHUB_OUTPUT
              echo "download_status=success" >> $GITHUB_OUTPUT
              
              # Extract newsletter content from log file
              echo "Extracting newsletter content..."
              python3 << 'EOF'
import re
import sys

try:
    with open('newsletter_output.log', 'r') as f:
        content = f.read()

    # Look for newsletter content in the log
    patterns = [
        r'üìù Content preview: (.*?)(?=INFO:|$)',
        r'Generated newsletter content:\s*(.*?)(?=INFO:|$)',
        r'Newsletter content:\s*(.*?)(?=INFO:|$)'
    ]

    newsletter_content = None
    for pattern in patterns:
        match = re.search(pattern, content, re.DOTALL)
        if match:
            newsletter_content = match.group(1).strip()
            break

    if newsletter_content:
        with open('newsletter_content.md', 'w') as f:
            f.write(newsletter_content)
        print("‚úÖ Extracted newsletter content to newsletter_content.md")
    else:
        print("‚ùå Could not extract newsletter content from log")
        sys.exit(1)

except Exception as e:
    print(f"‚ùå Error processing newsletter content: {e}")
    sys.exit(1)
EOF
              
            else
              echo "‚ùå Newsletter output file not found in artifact"
              echo "download_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚ùå Failed to download artifact from run #$RUN_NUMBER"
            echo "download_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish newsletter
        id: publish
        if: steps.download.outputs.download_status == 'success'
        run: |
          echo "üì§ Publishing newsletter to Buttondown..."
          
          if [ ! -f "newsletter_content.md" ]; then
            echo "‚ùå Newsletter content file not found"
            exit 1
          fi
          
          # Use the newsletter bot's publish functionality
          python3 << 'EOF'
import os
import sys
import aiohttp
import asyncio
import json
from pathlib import Path

async def publish_newsletter():
    # Read newsletter content
    content_file = Path('newsletter_content.md')
    if not content_file.exists():
        print("‚ùå Newsletter content file not found")
        return False
    
    content = content_file.read_text()
    
    # Extract title from content (first line that starts with #)
    lines = content.split('\n')
    title = "Newsletter"
    for line in lines:
        if line.strip().startswith('# '):
            title = line.strip()[2:].strip()
            break
    
    # Prepare Buttondown API request
    api_key = os.environ.get('BUTTONDOWN_API_KEY')
    if not api_key:
        print("‚ùå BUTTONDOWN_API_KEY not found")
        return False
    
    headers = {
        'Authorization': f'Token {api_key}',
        'Content-Type': 'application/json',
    }
    
    payload = {
        'subject': title,
        'body': content,
        'email_type': 'public'
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                'https://api.buttondown.email/v1/emails',
                headers=headers,
                json=payload
            ) as response:
                if response.status == 201:
                    result = await response.json()
                    print(f"‚úÖ Newsletter published successfully!")
                    print(f"   ID: {result.get('id', 'N/A')}")
                    print(f"   Secondary ID: {result.get('secondary_id', 'N/A')}")
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå Publication failed: {response.status}")
                    print(f"   Error: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå Publication error: {e}")
        return False

# Run the async function
success = asyncio.run(publish_newsletter())
sys.exit(0 if success else 1)
EOF
          
          if [ $? -eq 0 ]; then
            echo "publish_status=success" >> $GITHUB_OUTPUT
          else
            echo "publish_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}

      - name: Validate published newsletter
        id: validate
        if: steps.publish.outputs.publish_status == 'success'
        run: |
          echo "üîç Validating published newsletter is online..."
          sleep 10  # Give Buttondown time to process
          
          # Get the latest newsletter URL from Buttondown API
          NEWSLETTER_RESPONSE=$(curl -s -H "Authorization: Token ${{ secrets.BUTTONDOWN_API_KEY }}" \
            "https://api.buttondown.email/v1/newsletters")
          
          SECONDARY_ID=$(echo "$NEWSLETTER_RESPONSE" | jq -r '.results[0].secondary_id // empty')
          
          if [ -z "$SECONDARY_ID" ] || [ "$SECONDARY_ID" = "null" ]; then
            echo "‚ùå No newsletter found or secondary_id is null"
            echo "validation_status=failed" >> $GITHUB_OUTPUT
          else
            LATEST_URL="https://buttondown.com/filter/archive/$SECONDARY_ID"
            echo "Latest newsletter URL: $LATEST_URL"
            
            # Run validation
            if python scripts/check_briefing.py "$LATEST_URL" --verbose > validation_output.log 2>&1; then
              echo "validation_status=passed" >> $GITHUB_OUTPUT
              echo "‚úÖ Newsletter validation passed!"
            else
              echo "validation_status=failed" >> $GITHUB_OUTPUT
              echo "‚ùå Newsletter validation failed!"
              cat validation_output.log
            fi
          fi
        env:
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: publish-results-${{ github.run_number }}
          path: |
            newsletter_content.md
            newsletter_output.log
            validation_output.log
          retention-days: 30

      - name: Create success issue
        if: steps.publish.outputs.publish_status == 'success' && steps.validate.outputs.validation_status == 'passed'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let newsletterContent = 'Content not available';
            let validationResults = 'Validation results not available';
            
            try {
              newsletterContent = fs.readFileSync('newsletter_content.md', 'utf8').substring(0, 500) + '...';
            } catch (e) {
              console.log('Could not read newsletter content');
            }
            
            try {
              validationResults = fs.readFileSync('validation_output.log', 'utf8');
            } catch (e) {
              console.log('Could not read validation results');
            }

            const issueBody = `## üöÄ Newsletter Published Successfully

            **Published from Artifact:** Run #${{ steps.find_artifact.outputs.run_number }}
            **Timestamp:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### üìß Newsletter Preview
            \`\`\`markdown
            ${newsletterContent}
            \`\`\`

            ### üîç Online Validation Results
            \`\`\`
            ${validationResults}
            \`\`\`

            ### üîó Quick Links
            - [Source Artifact Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ steps.find_artifact.outputs.run_number }})
            - [Publication Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *Newsletter published from dry-run artifact using the Publish Newsletter workflow*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚úÖ Newsletter Published from Artifact - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['newsletter', 'published', 'success', 'automated']
            });

      - name: Create failure issue
        if: failure() || steps.download.outputs.download_status == 'failed' || steps.publish.outputs.publish_status == 'failed' || steps.validate.outputs.validation_status == 'failed'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let errorDetails = 'Error details not available';
            
            try {
              if (fs.existsSync('validation_output.log')) {
                errorDetails = fs.readFileSync('validation_output.log', 'utf8');
              }
            } catch (e) {
              console.log('Could not read error details');
            }

            const issueBody = `## ‚ùå Newsletter Publication Failed

            **Attempted Artifact:** Run #${{ steps.find_artifact.outputs.run_number || 'Not determined' }}
            **Timestamp:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### üìä Step Results
            - **Artifact Download:** ${{ steps.download.outputs.download_status || 'Unknown' }}
            - **Publication:** ${{ steps.publish.outputs.publish_status || 'Unknown' }}
            - **Online Validation:** ${{ steps.validate.outputs.validation_status || 'Unknown' }}

            ### üêõ Error Details
            \`\`\`
            ${errorDetails}
            \`\`\`

            ### üîç Troubleshooting
            1. Verify the artifact exists in the specified run
            2. Check newsletter content extraction worked properly
            3. Verify Buttondown API connectivity and authentication
            4. Ensure published newsletter is accessible online

            ---
            *Newsletter publication failed - check workflow logs for details*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Newsletter Publication Failed - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['newsletter', 'publication-failed', 'bug', 'automated', 'priority-high']
            });