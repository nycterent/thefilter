name: Newsletter Generation

on:
  # Scheduled run - every Saturday at 9:00 AM UTC
  schedule:
    - cron: "0 9 * * 6"

  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run in dry-run mode (no actual publishing)"
        required: false
        default: "false"
        type: boolean
      debug:
        description: "Enable debug logging"
        required: false
        default: "false"
        type: boolean

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      issues: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Temporarily disabled for testing
      # - name: Gate by Europe/Madrid local time
      #   if: inputs.dry_run != 'true'  # Skip timezone gate for dry runs
      #   run: |
      #     python - <<'PY'
      #     from datetime import datetime
      #     from zoneinfo import ZoneInfo
      #     now = datetime.now(ZoneInfo('Europe/Madrid'))
      #     exit(0 if now.hour == 6 else 78)
      #     PY

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run health check
        id: health_check
        run: |
          echo "Running health check..."
          if python -m src.newsletter_bot health; then
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            echo "Health check passed"
          else
            echo "health_status=unhealthy" >> $GITHUB_OUTPUT
            echo "Health check failed"
            exit 1
          fi
        env:
          READWISE_API_KEY: ${{ secrets.READWISE_API_KEY }}
          GLASP_API_KEY: ${{ secrets.GLASP_API_KEY }}
          RSS_FEEDS: ${{ secrets.RSS_FEEDS }}
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}

      - name: Generate newsletter
        id: generate
        run: |
          echo "Starting newsletter generation..."

          # Build command with options
          CMD="python -m src.newsletter_bot"
          if [[ "${{ inputs.debug }}" == "true" ]]; then
            CMD="$CMD --debug"
          fi
          CMD="$CMD generate"
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            CMD="$CMD --dry-run"
          fi

          echo "Running: $CMD"

          # Capture output and status
          if $CMD > newsletter_output.log 2>&1; then
            echo "generation_status=success" >> $GITHUB_OUTPUT
            echo "Newsletter generation completed successfully"
            echo "output_file=newsletter_output.log" >> $GITHUB_OUTPUT
          else
            echo "generation_status=failed" >> $GITHUB_OUTPUT
            echo "Newsletter generation failed"
            echo "output_file=newsletter_output.log" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          READWISE_API_KEY: ${{ secrets.READWISE_API_KEY }}
          GLASP_API_KEY: ${{ secrets.GLASP_API_KEY }}
          RSS_FEEDS: ${{ secrets.RSS_FEEDS }}
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          UNSPLASH_API_KEY: ${{ secrets.UNSPLASH_API_KEY }}

      - name: Validate Generated Newsletter
        if: steps.generate.outputs.generation_status == 'success' && inputs.dry_run != 'true'
        id: validate
        run: |
          echo "🔍 Running newsletter quality validation..."
          echo "Fetching latest newsletter from Buttondown..."

          # Get the latest newsletter URL from Buttondown API with better error handling
          NEWSLETTER_RESPONSE=$(curl -s -H "Authorization: Token ${{ secrets.BUTTONDOWN_API_KEY }}" \
            "https://api.buttondown.email/v1/newsletters")

          SECONDARY_ID=$(echo "$NEWSLETTER_RESPONSE" | jq -r '.results[0].secondary_id // empty')

          if [ -z "$SECONDARY_ID" ] || [ "$SECONDARY_ID" = "null" ]; then
            echo "❌ No newsletter found or secondary_id is null" > validation_output.log
            echo "This might indicate the newsletter generation didn't complete successfully" >> validation_output.log
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            cat validation_output.log
            # Don't exit here, continue to create issue with results
          else
            LATEST_URL="https://buttondown.com/filter/archive/$SECONDARY_ID"
            echo "Latest newsletter URL: $LATEST_URL"

            # Run validation
            if python scripts/check_briefing.py "$LATEST_URL" --verbose > validation_output.log 2>&1; then
              echo "validation_status=passed" >> $GITHUB_OUTPUT
              echo "✅ Newsletter validation passed!"
            else
              echo "validation_status=failed" >> $GITHUB_OUTPUT
              echo "❌ Newsletter validation failed! Issues detected."
              cat validation_output.log
              # Don't exit 1 here so we can still create the issue with results
            fi
          fi
        env:
          BUTTONDOWN_API_KEY: ${{ secrets.BUTTONDOWN_API_KEY }}

      - name: Upload newsletter output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: newsletter-output-${{ github.run_number }}
          path: newsletter_output.log
          retention-days: 30

      - name: Create success issue
        if: steps.generate.outputs.generation_status == 'success' && (inputs.dry_run == 'true' || steps.validate.outputs.validation_status == 'passed')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync('newsletter_output.log', 'utf8');

            let validationResults = '';
            try {
              const validationOutput = fs.readFileSync('validation_output.log', 'utf8');
              const validationStatus = '${{ steps.validate.outputs.validation_status }}';
              validationResults = `
            ### 🔍 Newsletter Quality Validation

            **Status:** ${validationStatus === 'passed' ? '✅ Passed' : validationStatus === 'failed' ? '❌ Failed' : '⚠️ Skipped (dry run)'}

            ${validationStatus !== '' ? `\`\`\`
            ${validationOutput}
            \`\`\`` : ''}`;
            } catch (e) {
              validationResults = `
            ### 🔍 Newsletter Quality Validation

            **Status:** ⚠️ Skipped (dry run mode)`;
            }

            const issueBody = `## 📧 Newsletter Generation Completed Successfully

            **Timestamp:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Dry Run:** ${{ inputs.dry_run }}
            **Debug Mode:** ${{ inputs.debug }}
            ${validationResults}

            ### 📊 Execution Details

            \`\`\`
            ${output}
            \`\`\`

            ### 🔗 Quick Links
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Download Full Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This issue was automatically created by the Newsletter Generation workflow*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `✅ Newsletter Generated Successfully - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['newsletter', 'success', 'automated']
            });

      - name: Create failure issue
        if: failure() || steps.generate.outputs.generation_status == 'failed' || steps.health_check.outputs.health_status == 'unhealthy' || (inputs.dry_run != 'true' && steps.validate.outputs.validation_status == 'failed')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let output = '';
            try {
              output = fs.readFileSync('newsletter_output.log', 'utf8');
            } catch (e) {
              output = 'No output file generated';
            }

            const issueBody = `## ❌ Newsletter Generation Failed

            **Timestamp:** ${new Date().toISOString()}
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Health Check:** ${{ steps.health_check.outputs.health_status }}
            **Generation Status:** ${{ steps.generate.outputs.generation_status }}
            **Dry Run:** ${{ inputs.dry_run }}
            **Debug Mode:** ${{ inputs.debug }}

            ### 🐛 Error Details

            \`\`\`
            ${output}
            \`\`\`

            ### 🔍 Troubleshooting Steps
            1. Check the [full workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Verify all required secrets are properly configured
            3. Check API service status for external dependencies
            4. Run a manual dry-run to test configuration

            ### 🔗 Quick Links
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Repository Secrets Settings](${{ github.server_url }}/${{ github.repository }}/settings/secrets/actions)

            ---
            *This issue was automatically created by the Newsletter Generation workflow*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Newsletter Generation Failed - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['newsletter', 'bug', 'automated', 'priority-high']
            });

  # Job to update status dashboard
  update-dashboard:
    runs-on: ubuntu-latest
    needs: generate-newsletter
    if: always()

    permissions:
      contents: write
      pages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate status dashboard
        run: |
          mkdir -p docs

          cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Newsletter Bot Status</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { text-align: center; margin-bottom: 30px; }
                  .status { display: flex; justify-content: space-between; align-items: center; padding: 15px; margin: 10px 0; border-radius: 6px; }
                  .status.success { background: #d4edda; border-left: 4px solid #28a745; }
                  .status.failure { background: #f8d7da; border-left: 4px solid #dc3545; }
                  .status.unknown { background: #fff3cd; border-left: 4px solid #ffc107; }
                  .links { margin-top: 30px; }
                  .links a { display: inline-block; margin: 5px 10px; padding: 8px 16px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; }
                  .timestamp { color: #6c757d; font-size: 0.9em; }
                  .badge { padding: 2px 8px; border-radius: 12px; font-size: 0.8em; font-weight: bold; }
                  .badge.success { background: #28a745; color: white; }
                  .badge.failure { background: #dc3545; color: white; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📧 Newsletter Bot Status</h1>
                      <p>Automated newsletter generation system</p>
                  </div>

                  <div class="status ${{ needs.generate-newsletter.result == 'success' && 'success' || 'failure' }}">
                      <div>
                          <strong>Last Newsletter Generation</strong>
                          <div class="timestamp">$(date -u '+%Y-%m-%d %H:%M:%S UTC')</div>
                          <div class="timestamp">Includes online publication verification</div>
                      </div>
                      <div>
                          <span class="badge ${{ needs.generate-newsletter.result == 'success' && 'success' || 'failure' }}">
                              ${{ needs.generate-newsletter.result == 'success' && '✅ Success' || '❌ Failed' }}
                          </span>
                      </div>
                  </div>

                  <div class="status success">
                      <div>
                          <strong>Next Scheduled Run</strong>
                          <div class="timestamp">Every Saturday at 9:00 AM UTC</div>
                      </div>
                      <div>⏰ Scheduled</div>
                  </div>

                  <div class="links">
                      <h3>🔗 Quick Actions</h3>
                      <a href="${{ github.server_url }}/${{ github.repository }}/actions/workflows/newsletter.yml">🔄 Manual Run</a>
                      <a href="${{ github.server_url }}/${{ github.repository }}/actions">📊 All Workflows</a>
                      <a href="${{ github.server_url }}/${{ github.repository }}/issues?q=label%3Anewsletter">📋 Newsletter Issues</a>
                      <a href="${{ github.server_url }}/${{ github.repository }}">📁 Repository</a>
                  </div>

                  <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; text-align: center; color: #6c757d;">
                      <small>Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') | Workflow #${{ github.run_number }}</small>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
